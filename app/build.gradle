plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'jacoco'
}

android {
    namespace 'com.example.codecoverageissue'
    compileSdk 33

    defaultConfig {
        applicationId "com.example.codecoverageissue"
        minSdk 26
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.includeAndroidResources = true
    }

    testCoverage.jacocoVersion = "0.8.9"
}

dependencies {

    implementation 'androidx.core:core-ktx:1.10.1'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    testImplementation 'junit:junit:4.13.2'

    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

//tasks.withType(Test) {
//    test {
//        finalizedBy jacocoTestReport // report is always generated after tests run
//    }
//}

task jacocoTestReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."

    def androidExclusion = [
            '**/BR.*',
            '**/R.*',
            '**/R$*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Fragment*.*',
            '**/*Adapter*.*',
            '**/*Decoration*.*',
            '**/*View*.*',
            '**/WheelPicker.*'
    ]

    reports {
        xml.getRequired().set(true)
        html.getRequired().set(true)
    }
    //Gradle 5.1.1 changed class path
    classDirectories.from = files([
            fileTree(
                    // Java generated classes (debug build)
                    dir: 'build/intermediates/javac/debug/classes',
                    excludes: androidExclusion
            ),
            fileTree(
                    // Kotlin generated classes (debug build)
                    dir: 'build/tmp/kotlin-classes/debug',
                    excludes: androidExclusion
            )
    ])
    sourceDirectories.from = files('src/main/java/')
    executionData.from = files('build/outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec')
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses true
    jacoco.excludes = ['jdk.internal.*']
}